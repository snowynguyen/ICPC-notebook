#!/usr/bin/python
import glob
import os
import subprocess
code_dir = "code"
title = "Stanford ACM-ICPC Team Notebook"

def get_sections():
    sections = []
    section_name = None
    with open('contents.txt', 'r') as f:
        for line in f:
            if '#' in line: line = line[:line.find('#')]
            line = line.strip()
            if len(line) == 0: continue
            if line[0] == '[':
                section_name = line[1:-1]
                subsections = []
                if section_name is not None:
                    sections.append((section_name, subsections))
            else:
                tmp = line.split('\t', 1)
                if len(tmp) == 1:
                    raise ValueError('Subsection parse error: %s' % line)
                filename = tmp[0]
                subsection_name = tmp[1]
                if section_name is None:
                    raise ValueError('Subsection given without section')
                subsections.append((filename, subsection_name)) # pyright: ignore[reportPossiblyUnboundVariable]
    return sections

def get_style(filename):
    ext = filename.lower().split('.')[-1]
    if ext in ['c', 'cc', 'cpp']:
        return 'cpp'
    elif ext in ['java']:
        return 'java'
    elif ext in ['py']:
        return 'py'
    elif ext in ['tex']:
        return 'tex'
    else:
        return 'txt'

# TODO: check if this is everything we need
def texify(s):
    #s = s.replace('\'', '\\\'')
    #s = s.replace('\"', '\\\"')
    return s

def get_tex(sections):
    tex = ''
    for (section_name, subsections) in sections:
        tex += '\\section{%s}\n' % texify(section_name)
        for (filename, subsection_name) in subsections:
            tex += '\\subsection{%s}\n' % texify(subsection_name)
            if (get_style(filename) == "tex"):
                tex += '\\raggedbottom \n\\input %s/%s \n' % (code_dir, filename)
            else:
                tex += '\\raggedbottom\\lstinputlisting[style=%s]{%s/%s}\n' % (get_style(filename), code_dir, filename)
            tex += '\\hrulefill\n'
        tex += '\n'
    return tex

def clean_latex_files(directory='.'):
    """
    Cleans up common temporary files generated by LaTeX compilation.

    Args:
        directory (str): The directory to clean. Defaults to the current directory.
    """
    # A list of file extensions to be removed.
    file_extensions = [
        '*.aux', '*.log', '*.out', '*.toc', '*.lof', '*.lot',
        '*.bbl', '*.blg', '*.idx', '*.ind', '*.ilg', '*.upa',
        '*.thm', '*.nav', '*.snm', '*.vrb', '*.fls', '*.fdb_latexmk',
        '*.synctex.gz', '*.dvi', '*.ps', '*.bcf', '*.run.xml'
    ]

    print(f"Starting cleanup in directory: {os.path.abspath(directory)}")
    
    # Change to the specified directory
    try:
        os.chdir(directory)
    except FileNotFoundError:
        print(f"Error: Directory '{directory}' not found.")
        return

    files_removed = 0
    # Iterate over each file extension
    for ext in file_extensions:
        # Find all files matching the pattern
        for file in glob.glob(ext):
            try:
                os.remove(file)
                print(f"  Removed: {file}")
                files_removed += 1
            except OSError as e:
                print(f"  Error removing file {file}: {e}")
    
    print(f"\nCleanup complete. Total files removed: {files_removed}")

if __name__ == "__main__":

    clean_latex_files()
    latexmk_clear = ["latexmk", "-c"]
    subprocess.call(latexmk_clear)

    sections = get_sections()
    tex = get_tex(sections)
    with open('contents.tex', 'w') as f:
        f.write(tex)
    latexmk_options = ["latexmk", "-pdf", "notebook.tex"]
    subprocess.call(latexmk_options)
